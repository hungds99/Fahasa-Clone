# ===============================
# = DATA SOURCE
# ===============================

# Set here configurations for the database connection

# Connection url for the database "netgloo_blog"
spring.datasource.url = jdbc:mysql://localhost:3306/petdb?useSSL=false

# Username and password
spring.datasource.username = root
spring.datasource.password = 1234

# ===============================
# = JPA / HIBERNATE
# ===============================

# Spring Boot registers an OpenEntityManagerInViewInterceptor (check the class JpaBaseConfiguration), 
# which ensures that the entity manager is open for the complete request, 
# which means, the lazy collection can be resolved while serializing the entity to JSON.
spring.jpa.open-in-view=false

server.error.whitelabel.enabled=false

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
spring.jpa.show-sql = true
#spring.jpa.properties.hibernate.generate_statistics=true

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
# spring.jpa.hibernate.ddl-auto = update

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect

# ===============================
# = THYMELEAF
# ===============================

# If default mappings should be added
spring.resources.add-mappings= true

spring.main.allow-bean-definition-overriding=true

# Transaction Logging
logging.level.ROOT=INFO
logging.level.org.springframework.orm.jpa=DEBUG
logging.level.org.springframework.transaction=DEBUG


# File Upload
spring.servlet.multipart.max-file-size=12800KB
spring.servlet.multipart.max-request-size=12800KB
